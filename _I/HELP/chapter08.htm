<html>
 <head>
  <title>
   Основы языка
  </title>
 </head>
<body background = "RES\fon4.gif">
  <p align = center>
   <font size = 8>
    Основы языка
   </font>
  </p>
  Стиль языка программирования частично всят от языка С++ и частично от зыка Паскаля.<br>
  Данный язык позволяет обрабатывать логичские выражения, использовать циклы, ветвления.<br><br>
  <a name = "main_operations"></a>
  <u>Основные операции</u>:<br>
  -Нумерные: позволяют выполнять арифметические, математические и алгебраичесие действия над переменными. //Пример: x+y, x-y, x*y, x/y, x^y  и т.д.<br>
  -Сравнительные: выполняют операции сравнения переменных. //Пример x>y, x<y, x>=y, x<=y, x=y, x<>y  и т.д.<br>
  -Логические: выполнение логических операций над переменными. //Пример a AND b, a OR b, NOT(a), x in [...] и т.д.<br><br>
  <a name = "main_functions"></a>
  <u>Функции:</u><br>
  -Abs(x)-Вывод абсолютного значения (модуль числа)<br>
  -Frac(x)-Вывод значения находящегося после точки в числе<br>
  -Trunc(x)-Округление числа в наименьшую сторону<br>
  -Heaviside(x)-Является ли число положительным<br>
  -Sign(x)-Функция сигнатуры<br>
  -Sqrt(x)-Функция вычисления квадратного корня<br>
  -Ln(x)-Натуральный логарифм (по основанию e)<br>
  -Exp(x)-Функция экспоненты (e^x)<br>
  -Cos(x)-Косинус<br>
  -CTg(x)-Котангенс<br>
  -Ch(x)-Гиперболический косинус<br>
  -CTh(x)-Гиперболический котангенс<br>
  -Sin(x)-Синус<br>
  -Sh(x)-Гиперболический синус<br>
  -Tg(x)-Тангенс<br>
  -Th(x)-Гиперболический тангенс<br>
  -ArcSin(x)-Арксинус<br>
  -ArcCos(x)-Арккосинус<br>
  -ArcTg(x)-Арктангенс<br>
  -ArcCtg(x)-Арккотангенс<br>
  -Random(x)-Вывод произвольного числа<br>
  -Format("format",x,y...)-Форматный вывод строки<br>
  -MaxVal(x [,y, ...])-Максимальное число значений всех элементов в массиве<br>
  -MinVal(x [,y, ...])-Минимально число всех элементов в массиве<br>
  -SumVal(x [,y,...])-Сумма значений всех элементов массива<br>
  -AvgVal(x [,y, ...])-Среднее значение элементов массива<br><br>
  <a name = "string_functions"></a>
  <u>Строковые функции:</u><br>
  -Length(s)-Вывод длины строки<br>
  -Pos(t,s)-Вывод позиции заданного символа в строке<br>
  -Trim(s)-Удаление незначащих символов в строке в начале и в конце //Пример Trim('  String     ')='String'<br>
  -TrimLeft(s)-Удаление незначащих пробелов в начале строки<br>
  -TrimRight(s)-Удаление незначащих символов в конце строки<br>
  -Upper(s)-Преобразование строчных символов в прописные<br>
  -Lower(s)-Преобразование прописных символов в строковые<br>
  -Copy(s,x,[y]), CopyTo(s,x,[y])-Копирование участка строки<br>
  -Delete(s,x,[y])-Удаление участка строки<br>
  -Insert(s,t,x)-Внедрение в строку<br>
  -Replace(s,t,v,[1/0=ReplaceAll,[1/0=IgnoreCase]] )-Функция замены<br>
  -IFF(a,s,t)-Выбор строки //IF a>=1 then Result:=s else Result:=t<br>
  -Prefix(count,char,s)-Вставка префикса<br><br>
  <a name = "graph_functions"></a>
  <u>Функции работы с графикой:</u><br>
  -glVertex3f(x,y,z)-Построение вершины в 3-х мерном режиме<br>
  -DrawAxis(x,y,z)-Отрисовка осей в 3-х мерном пространстве, где x,y,z-логические (1/0)<br>
  -DrawGrids(xy,yz,zx)-Отрисовка координатных сеток в 3-х мерном пространстве, где x,y,z-логические (1/0)<br>
  -glColor3f(R,G,B)-Установка цвета отрисовки в 3-х мерном режиме, где R,G,B-[0..255]<br>
  -glBegin(draw type)-Начало отрисовки, где draw type метод отрисовки (_GL_LINES, _GL_POINTS [0..255])<br>
  -glEnd(draw type)-Завершение отрисовки<br>
  -MoveToXY(x,y)-Переместить перо в указанные координаты в 2-х мерном режиме<br>
  -LineToXY(x,y)-Прочертить пером к указанной точке в 2-х мерном режиме<br>
  -glNewList("List name")-Создание нового 3-х мерного листа, имя любое<br>
  -glEndList("List name")-Логическое завершение 3-х мерного листа<br>
  -glDeleteList(index)-Удаление 3-х мерного листа<br>
  -glLineWidth(x)-Усталовка толщины линии в 3-х мерном режиме<br><br>
  <a name = "windows_functions"></a>
  <u>Функции работы с окнами:</u><br>
  -Init2D(_CREATE)-Инициализация окна 2-х мерного режима //_CREATE-Создать _FREE-Освободить<br>
  -Init3D(_CREATE)-Инициализация окна 3-х мерного режима //_CREATE-Создать _FREE-Освободить<br>
  -InitConsole(_CREATE)-Инициализация окна консоли //_CREATE-Создать _FREE-Освободить<br>
  -ClearConsole(_VOID)-Очистка консоли<br>
  -SetXYaxisLength(x,y)-Установка длины осей в 2-х мерном режиме<br>
  -Draw2D(_VOID)-Команда перерисовки всех точек в 2-х мерном режиме<br>
  -SetBuffSize(length)-Установить длину буффера 2-х мерного режима для хранения точек<br>
  -MessageBox("text","title",type)-Вывод системного сообщения, где type прописывется тип кнопок и тип сообщения //Пример _MB_OK+_MB_ICONSTOP<br>
  -Sleep(delay)-Команда временной остановки выполнения программы, на указанное число миллисекунд<br><br>
  <a name = "console_functions"></a>
  <u>Функции для работы с консолью:</u><br>
  -Read(any type)-Функция чтения информации из консоли<br>
  -Readln(any type)-Функция чтения информации из консоли с возвратом каретки<br>
  -Write(any type)-Вывод информации в консоль<br>
  -Writeln(any type)-Вывод информации в консоль с возвратом каретки<br>
  <a name = "include_modules"></a>
  <u>Подключение модулей:</u><br>
  -Uses("module name")-Подключение модуля из папки "MODULES"<br><br>
  <a name = "script"></a>
  <u>Процедура</u> используется в том случае если программный код является очень большим и происходит выполнение нескольких операций несколько раз подряд, использование процедур сокращает длину исходного кода текущей программы. Так же процедуры можно использовать для более удобного и быстрого чтения исходного кода.<br>
  Описание процедуры:<br>
  <b>Procedure</b> Procedure_name<br>
  {<br>
		/* Некоторый код */<br>
  }<br>
  Каждая описанная процедура является глобальной и может быть вызвана из любой части программы.<br><br>
  <u>Вызов процедуры.</u> Для выполнения процедуры, необходимо ее вызвать, для вызова процедуры предназначена команда <b>Exec</b>, для вызова процедуры "proc1" необходимо ввести <b>Exec</b> proc1; при выполнении (отладке) программы, обработчик автоматически перейдет в тело процедуры, выполнит все команды, после чего вернет управление основному коду.<br><br>
  <u>Выход из процедуры.</u> Для завершения выполнения процедуры применяется команда <b>Exit</b> при вызове данной команды, обработка процедуры прервется и управление передасться основному коду.<br><br>
  <a name = "ultima"></a>
  <u>Ветвление.</u> Ветвление предназначено для выполнения определенного кода в зависимости от условия.<br>
  Примар использования ветвления:<br>
  if (a>b) then<br>
  {<br>
		/* Некоторый код, если условие истинно */<br>
  }else<br>
  {
		/* Некоторый код, если условие ложно */<br>
  }<br><br>
  <a name = "cycle"></a>
  <u>Цикл.</u> Цикл-выполнение кода до тех пор пока не будет выполнено необходимое условие.<br>
  В данной программе используется цикл с пред условием <b>While</b>, даннй цикл будет выполняться до тех пор пока не выполниться условие между while и do.<br>
  Пример цикла:<br>
  <b>While</b> a<>10 <b>do</b>
  {<br>
		/* Некоторый код */<br>
  }<br><br>
  <u>Управляющие инструкции</u>:<br>
   <ol>
    <li>Exit-Завершает выполнение текущей процедуры.
    <li>Break-Выход из цикла.
    <li>Continue-Продолжить выполнение цикла не обрабатывая ниже последующий код.
   </ol><br><br>
   <a name = "additional"></a>
  <u>Дополнительные команды</u>.<br>
   <ol>
    <li>Beep-Выдает системный звуковой сигнал.
    <li>/* */-Обозначение коментариев
   </ol>
   
</body>